version: '3.9'

#server aqui apenas significa que foi o primeiro cara a entrar na arquitetura CHORD.

services:
  server:
    container_name: c0
    build:
      context: .
      dockerfile: "Dockerfile-server"
    networks:
      my-network:
        ipv4_address: 182.18.0.2

  client:
    container_name: c1
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["script1.txt"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.0.3
        
  client2:
    container_name: c2
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["script2.txt"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.0.4
        
  client3:
    container_name: c3
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["2", "1"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.0.5
        
  client4:
    container_name: c4
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["3", "3", "file", "content"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.1.7
        
        
  client5:
    container_name: c5
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["5", "4", "test.txt", "caramba"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.1.8  

  client6:
    container_name: c6
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["5", "6", "oi.txt", "caramba"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.1.9
        
        
  client7:
    container_name: c7
    build:
      context: .
      dockerfile: "Dockerfile-client"
    command: ["3", "12", "oi.txt", "caramba", "test.txt"]
    stdin_open: true 
    tty: true 
    networks:
      my-network:
        ipv4_address: 182.18.1.12
        

# criar cliente 4 com docker file igual a "Dockerfile-client2", que vai usar outro script
# que Ã© bem similar ao usado no "Dockerfile-client"

networks:
  my-network:
    driver: bridge
    ipam:
      config:
        - subnet: 182.18.0.0/16

#view docker compose from lab 1 csc27!
#build:
#      context: .
#      dockerfile: "Dockerfile.Process"
#    command: ["2", "p11:10004", "p22:10003", "p33:10002"]
#    stdin_open: true 
